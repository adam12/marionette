#
#
# This is our input file.
#
# As you can guess comments are prefixed with a "#", and they are ignored
# entirely.
#
#


#
# Variables can be defined as simple strings, via the `let` keyword
#
let foo = "bar"


#
# The general form of this input-file is a set of rules:
#
#   $MODULE {
#              name => "NAME OF RULE",
#              arg_1 => "Value 1 ... ",
#              arg_2 => [ "array values", "are fine" ],
#              arg_3 => "Value 3 .. ",
#   }
#
#  There are a couple of modules supported at the moment:
#
#   file -  Working with files
#
#   directory - Working with directories
#
#   shell   - Executing shell commands (NOP)
#
#
# Dependencies must be specified within the rules, manually, for
# example if you need to run a command only when a directory is
# present you'd do this:
#
#    directory{ name => "Create /tmp", target => "/tmp" }
#
#    shell{ name => "Test", command = "uptime > /tmp/uptime",
#           dependencies => [ "Create /tmp" ]
#
#


#
# Now follows some test rules
#

#
#  Create a directory.
#
#  Each action has a "name", and a per-module set of key/values
#
#  The names must be unique.
#
#  Notice here we used `${foo}` to refer to the variable we defined
# at the top of the file?
#
directory { name   => "ok-template",
            target => "/tmp/${foo}",
            mode   => "0755",
            notify => [ "I touch your file"] }


directory { name   => "ok",
            target => "/tmp/foo/meow/cat/dog",
            mode   => "0777", }


directory { name => "/tmp",
    target => "/tmp",
}

#
# Create a file, from the given remote URL
#
file {  name       => "fetch file",
        target     => "/tmp/${foo}.txt",
        source_url => "https://steve.fi/",

# Implied since I run as non-root
#
#       owner      => "skx",
#       group      => "skx",

        requires   => "/tmp",
        notify     => [ "I count your lines uptime." ],
}



#
# These are some shell-commands.
#
shell triggered { name => "I count your lines uptime.",
                  command => "wc -l /tmp/steve.txt > /tmp/line.count"  }

shell { name => "I touch your file.",
        command => "touch /tmp/blah/test.me" }
